---
name: Create Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'v*'

jobs:
  basic-build:
    name: Basic Build
    runs-on: ubuntu-latest
    outputs:
      our_date: ${{ env.our_date }}
      git_hash: ${{ steps.set_vars.outputs.git_hash }}
      cc_files_hash_id: ${{ env.cc_files_hash_id }}
      version_id: ${{ env.version_id }}
      package_name: ${{ env.package_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@master
      - name: Set Variables
        id: set_vars
        run: |
          version_id=${GITHUB_REF_NAME:1}
          package_name=${GITHUB_REPOSITORY##*/}
          sha_short=$(git rev-parse --short "$GITHUB_SHA")
          cc_hash_id=${{ hashFiles('cello.c') }}
          echo "our_date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_ENV
          echo "git_hash=$sha_short" >> $GITHUB_ENV
          echo "git_hash=$sha_short" >> $GITHUB_OUTPUT
          echo "version_id=$version_id" >> $GITHUB_ENV
          echo "package_name=$package_name" >> $GITHUB_ENV
          echo "cc_files_hash_id=${cc_hash_id:0:10}" >> $GITHUB_ENV
          echo "deb_path=debian/artifacts" >> $GITHUB_ENV
          echo "test_file=1.txt" >> $GITHUB_ENV
          echo "rpm_path=rpmbuild/RPMS" >> $GITHUB_ENV
      - id: test_cache_restore
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ env.test_file }}
          key: ${{ runner.os }}-${{ env.package_name }}-${{ env.version_id }}-${{ env.cc_files_hash_id }}-test_build
      - if: steps.test_cache_restore.outputs.cache-hit != 'true'
        run: |
          pwd
          echo ok > ${{ env.test_file }}
          ls
      - id: test_cache_save
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ env.test_file }}
          key: ${{ steps.test_cache_restore.outputs.cache-primary-key }}


  deb-build:
    name: Create Release to ${{ inputs.deploy_target }} by @${{ github.actor }}
    runs-on: ubuntu-latest
    needs: [basic-build]

    steps:
      - env:
        OUR_DATE: ${{ needs.basic-build.outputs.our_date }}
        GIT_HASH: ${{ needs.basic-build.outputs.git_hash }}
      - name: Print Vars ${{ env.git_hash }}
        run: |
          echo $OUR_DATE
          echo ${{ env.OUR_DATE }}
          echo ${{ needs.basic-build.outputs.git_hash }}
      - id: test_cache_restore
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ env.test_file }}
          key: ${{ runner.os }}-${{ env.package_name }}-${{ env.version_id }}-${{ env.cc_files_hash_id }}-test_build
      - run: |
          pwd
          ls


#      - name: Restore DEB Cache for Ubuntu
#        id: deb_cache_restore
#        uses: actions/cache/restore@v3
#        with:
#          path: |
#            ${{ env.deb_path }}
#          key: ${{ runner.os }}-${{ env.package_name }}-${{ env.version_id }}-${{ env.cc_files_hash_id }}-deb_build
#
#      - if: steps.deb_cache_restore.outputs.cache-hit != 'true'
#        name: Build DEB Package for Ubuntu
#        id: deb_build_ubuntu
#        uses: cnangel/build-deb-action@master
#        with:
#          before_build_hook: sed -i "s#0.0.30-1#${{ env.version_id }}-1#" debian/changelog
#          buildpackage_opts: --build=binary
#          is_output_all_files: false
#
#      - name: Save DEB Cache for Ubuntu
#        id: deb_cache_save
#        uses: actions/cache/save@v3
#        with:
#          path: |
#            ${{ env.deb_path }}
#          key: ${{ steps.deb_cache_restore.outputs.cache-primary-key }}
#
#      - name: Restore RPM Cache
#        id: rpm_cache_restore
#        uses: actions/cache/restore@v3
#        with:
#          path: ${{ env.rpm_path }}
#          key: ${{ runner.os }}-${{ env.package_name }}-${{ env.version_id }}-${{ env.cc_files_hash_id }}-rpm_build
#
#      - if: steps.rpm_cache_restore.outputs.cache-hit != 'true'
#        name: Build RPM Package for CentOS7
#        id: rpm_build_centos7
#        uses: cnangel/rpmbuild@centos7
#        with:
#          spec_file: "${{ env.package_name }}.spec"
#
#      - if: steps.rpm_cache_restore.outputs.cache-hit != 'true'
#        name: Build RPM Package for CentOS8
#        id: rpm_build_centos8
#        uses: cnangel/rpmbuild@centos8
#        with:
#          spec_file: "${{ env.package_name }}.spec"
#
#      - if: steps.rpm_cache_restore.outputs.cache-hit != 'true'
#        name: Build RPM Package for CentOS9
#        id: rpm_build_centos9
#        uses: cnangel/rpmbuild@centos9
#        with:
#          spec_file: "${{ env.package_name }}.spec"
#
#      - if: steps.rpm_cache_restore.outputs.cache-hit != 'true'
#        name: Build RPM Package for Fedora38
#        id: rpm_build_fedora38
#        uses: cnangel/rpmbuild@fedora/38
#        with:
#          spec_file: "${{ env.package_name }}.spec"
#
#      - name: Save RPM Cache
#        id: rpm_cache_save
#        uses: actions/cache/save@v3
#        with:
#          path: |
#            ${{ env.rpm_path }}
#          key: ${{ steps.rpm_cache_restore.outputs.cache-primary-key }}
#
#      - name: Set Output Info
#        id: output_info
#        run: |
#          echo "deb_packages=$(find ${{ env.deb_path }} -name '*.deb' 2>/dev/null | jo -a | jq -r 'join("'","'")')" >> $GITHUB_OUTPUT
#          echo "el7_rpm_packages=$(find ${{ env.rpm_path }} -name '*.el7*.rpm' 2>/dev/null | jo -a | jq -r 'join("'","'")')" >> $GITHUB_OUTPUT
#          echo "el8_rpm_packages=$(find ${{ env.rpm_path }} -name '*.el8*.rpm' 2>/dev/null | jo -a | jq -r 'join("'","'")')" >> $GITHUB_OUTPUT
#          echo "el9_rpm_packages=$(find ${{ env.rpm_path }} -name '*.el9*.rpm' 2>/dev/null | jo -a | jq -r 'join("'","'")')" >> $GITHUB_OUTPUT
#          echo "fc38_rpm_packages=$(find ${{ env.rpm_path }} -name '*.fc38*.rpm' 2>/dev/null | jo -a | jq -r 'join("'","'")')" >> $GITHUB_OUTPUT
#
#      - name: Release ${{ github.ref_name }}
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ github.ref }}
#          name: Release ${{ github.ref_name }}
#          body: |
#            Changes in this Release ${{ github.ref_name }}
#            - Create DEB and RPM
#            - Add Cache support
#            - Upload DEB, Source RPM and RPMS
#          files: |
#            README.md,LICENSE
#            ${{ steps.output_info.outputs.deb_packages }}
#            ${{ steps.output_info.outputs.el7_rpm_packages }}
#            ${{ steps.output_info.outputs.el8_rpm_packages }}
#            ${{ steps.output_info.outputs.el9_rpm_packages }}
#            ${{ steps.output_info.outputs.fc38_rpm_packages }}
#          token: ${{ secrets.SSE_TOKEN }}
#          draft: false
#          prerelease: false
